<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>文件的基本操作</title>
    <url>/2020/03/20/%E6%96%87%E4%BB%B6%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h3 id="1-操作文件的套路"><a href="#1-操作文件的套路" class="headerlink" title="1. 操作文件的套路"></a>1. 操作文件的套路</h3><p>在计算机中，操作文件一般包括<strong>三个步骤</strong>：</p>
<ol>
<li>打开文件</li>
<li>读、写文件<ul>
<li><strong>读</strong> 将文件内容读入内存</li>
<li><strong>写</strong> 将内存内容写入文件</li>
</ul>
</li>
<li>关闭文件  </li>
</ol>
<a id="more"></a>

<h3 id="2-操作文件的函数-方法"><a href="#2-操作文件的函数-方法" class="headerlink" title="2. 操作文件的函数/方法"></a>2. 操作文件的函数/方法</h3><ul>
<li>在<code>python</code>中要操作文件需要记住1个函数和3个方法  </li>
</ul>
<table>
<thead>
<tr>
<th><strong>序号</strong></th>
<th align="left"><strong>函数/方法</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>01</td>
<td align="left">open</td>
<td>打开文件，并返回文件操作的对象</td>
</tr>
<tr>
<td>02</td>
<td align="left">read</td>
<td>将文件内容写入内存</td>
</tr>
<tr>
<td>03</td>
<td align="left">write</td>
<td>将制定内容写入文件</td>
</tr>
<tr>
<td>04</td>
<td align="left">close</td>
<td>关闭文件</td>
</tr>
</tbody></table>
<ul>
<li><code>open</code>函数负责打开文件，并返回文件对象</li>
<li><code>read</code>/<code>write</code>/<code>close</code> 三个方法都需要通过<strong>文件对象</strong>来调用</li>
</ul>
<h4 id="2-1-read方法-——读取文件"><a href="#2-1-read方法-——读取文件" class="headerlink" title="2.1 read方法 ——读取文件"></a>2.1 read方法 ——读取文件</h4><ul>
<li><p><code>open</code>函数等等第一个参数时要打开的(路径)文件名 <strong>注：区分大小写</strong></p>
<ul>
<li>如果文件<strong>存在</strong>，返回<strong>文件操作对象</strong></li>
<li>如果文件<strong>不存在</strong>，会<strong>抛出异常</strong></li>
</ul>
</li>
<li><p><code>read</code>方法可以一次性<strong>读入</strong>并<strong>返回</strong>文件的所有内容</p>
</li>
<li><p><code>close</code>负责关闭文件</p>
<ul>
<li>如果忘记<strong>关闭文件，会造成系统资源的消耗，而且会影响到后续对文件的访问</strong></li>
</ul>
</li>
<li><p><strong>注意：</strong>方法执行后，会把 <strong>文件指针</strong> 移动到文件的末尾</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开 - 文件名需要注意大小写（一般需要添加编码格式）</span></span><br><span class="line">file = open(<span class="string">"readme.txt"</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="comment"># 读取</span></span><br><span class="line">text = file.read()</span><br><span class="line">print(text)</span><br><span class="line"><span class="comment"># 关闭</span></span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure>

<h5 id="2-1-1-文件指针（补充）"><a href="#2-1-1-文件指针（补充）" class="headerlink" title="2.1.1 文件指针（补充）"></a>2.1.1 文件指针（补充）</h5><ul>
<li>文件指针标记从哪个位置开始读取数据</li>
<li><strong>第一次打开</strong> 文件时，通常文件指针会指向文件的开始位置</li>
<li>当执行了<code>read</code>方法后，<strong>文件指针</strong> 会移动到<strong>读取内容的末尾</strong><ul>
<li>默认情况下会移动到<strong>文件末尾</strong></li>
</ul>
</li>
</ul>
<p>比如：执行了一次<code>read</code>方法，读取了所有内容，再次调用<code>read</code>方法时，则不能获取到内容</p>
<h5 id="2-1-2-按行读取文件的内容"><a href="#2-1-2-按行读取文件的内容" class="headerlink" title="2.1.2 按行读取文件的内容"></a>2.1.2 按行读取文件的内容</h5><ul>
<li><code>read</code>方法默认会把文件的<strong>所有内容一次性读取到内存</strong></li>
<li>如果文件太大，对内存的占用会非常严重</li>
</ul>
<p><strong>readline</strong>方法</p>
<ul>
<li><code>readline</code>方法可以一次读取一行内容</li>
<li>方法执行后，会把<strong>文件指针</strong>移动到下一行，准备再次读取</li>
</ul>
<p><strong>读取大文件的正确姿势</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">file = open(<span class="string">"readme.txt"</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    text = file.readline()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> text:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    print(text)</span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure>



<h4 id="2-2-打开文件的方式"><a href="#2-2-打开文件的方式" class="headerlink" title="2.2 打开文件的方式"></a>2.2 打开文件的方式</h4><ul>
<li><code>open</code>函数默认以<strong>只读方式</strong>打开文件，并且返回文件对象</li>
</ul>
<p>语法如下：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">f</span> = open(<span class="string">"文件名"</span>, <span class="string">"访问方式"</span>)</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center"><strong>访问方式</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center">r</td>
<td>以<strong>只读</strong>方式打开文件。文件的指针将会放在文件的开头，这是<strong>默认模式</strong>。如果文件不存在，抛出异常</td>
</tr>
<tr>
<td align="center">w</td>
<td>以<strong>只写</strong>方式打开文件。如果文件存在会被<strong>覆盖</strong>。如果文件不存在，创建新文件</td>
</tr>
<tr>
<td align="center">a</td>
<td>以<strong>追加</strong>方式打开文件。如果该文件已存在，文件的指针将会放在文件的结尾。如果文件不存在，创建新文件进行写入</td>
</tr>
<tr>
<td align="center">r+</td>
<td>以<strong>读写</strong>方式打开文件。文件的指针将会放在文件的开头。如果文件不存在，抛出异常</td>
</tr>
<tr>
<td align="center">w+</td>
<td>以<strong>读写</strong>方式打开文件。如果文件存在会被<strong>覆盖</strong>。如果文件不存在，创建新文件</td>
</tr>
<tr>
<td align="center">a+</td>
<td>以<strong>读写</strong>方式打开文件。如果该文件已存在，文件指针将会放在文件的结尾。如果文件不存在，创建新文件进行写入</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开 - 文件名需要注意大小写（一般需要添加编码格式）</span></span><br><span class="line">file = open(<span class="string">"readme.txt"</span>,<span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="comment"># 写</span></span><br><span class="line">file.write(<span class="string">'英雄联盟'</span>)</span><br><span class="line">file.write(<span class="string">'绝地求生'</span>)</span><br><span class="line">file.write(<span class="string">'刺激战场'</span>)</span><br><span class="line"><span class="comment"># 关闭</span></span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure>

<h3 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h3><ul>
<li>复制小文件</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">file_read = open(<span class="string">"readme.txt"</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">file_write = open(<span class="string">"readme[复件].txt"</span>,<span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line">text = file_read.read()</span><br><span class="line">file_write.write(text)</span><br><span class="line"></span><br><span class="line">file_read.close()</span><br><span class="line">file_write.close()</span><br></pre></td></tr></table></figure>

<ul>
<li>复制大文件</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">file_read = open(<span class="string">"readme.txt"</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">file_write = open(<span class="string">"readme[复件].txt"</span>,<span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    text = file_read.readline()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> text:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    file_write.write(text)</span><br><span class="line">file_read.close()</span><br><span class="line">file_write.close()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>匿名函数与map/reduce</title>
    <url>/2020/03/06/%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E4%B8%8Emap-reduce/</url>
    <content><![CDATA[<h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><ul>
<li>关键字lambda表示匿名函数。</li>
<li>冒号前面表示函数参数列表、后面表示表达式。<br><code>lambda parameter_list: expression</code>  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#普通函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"><span class="comment">#匿名函数</span></span><br><span class="line"><span class="keyword">lambda</span> x, y: x + y</span><br></pre></td></tr></table></figure>
<a id="more"></a>

</li>
</ul>
<h4 id="匿名函数的特点"><a href="#匿名函数的特点" class="headerlink" title="匿名函数的特点"></a>匿名函数的特点</h4><ul>
<li>没有函数名。因为函数没有名字，所以不必担心函数名冲突。<h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4></li>
<li>匿名函数只能有一个表达式，不用写return，该表达式的结果就是返回值。</li>
<li>表达式不能是代码块</li>
<li>表达式不能做赋值操作</li>
</ul>
<h3 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h3><ul>
<li>map(func, *iterables)–&gt; map object</li>
</ul>
<p>*iterables：一个或多个序列</p>
<h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_x = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x * x</span><br><span class="line">r = map(square,list_x)</span><br><span class="line">print(list(r))</span><br><span class="line"><span class="comment">#[1, 4, 9, 16, 25, 36, 49, 64]</span></span><br></pre></td></tr></table></figure>
<h4 id="map与lambda"><a href="#map与lambda" class="headerlink" title="map与lambda"></a>map与lambda</h4><ul>
<li>单个参数<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_x = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">r = map(<span class="keyword">lambda</span> x: x*x,list_x)</span><br><span class="line">print(list(r))</span><br><span class="line"><span class="comment">#[1, 4, 9, 16, 25, 36, 49, 64]</span></span><br></pre></td></tr></table></figure></li>
<li>多个参数  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_x = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">list_y = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]<span class="comment"># 6个元素</span></span><br><span class="line">r = map(<span class="keyword">lambda</span> x, y: x*x,list_x, list_y)</span><br><span class="line"><span class="comment">#x, y与list_x, list_y分别相对应</span></span><br><span class="line">print(list(r))</span><br><span class="line"><span class="comment"># [1, 4, 9, 16, 25, 36] 6个元素</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><em>注:①lambda引号前的参数个数须与map的第二个可变参数个数保持一致</em><br><em>注:②本例中输出列表中元素的个数取决于参数列表长度较少的那个</em></p>
<h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce()"></a>reduce()</h3><ul>
<li>使用reduce需要导入<br><code>from functools import reduce</code>  </li>
<li>reduce(function, sequence(一个序列), initial=None)-&gt; value</li>
<li>reduce()是返回一个值</li>
<li>一般用法：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="comment"># 需要导入reduce</span></span><br><span class="line"><span class="comment"># 连续计算，连续调用lambda，直到序列遍历完</span></span><br><span class="line">list_x = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">r = reduce(<span class="keyword">lambda</span> x, y: x + y,list_x)</span><br><span class="line">print(r)</span><br><span class="line"><span class="comment"># 运行顺序为(((1+2)+3)+4)+5...</span></span><br></pre></td></tr></table></figure></li>
<li>带(initial)默认值的用法<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line">list_x = [<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>,<span class="string">'5'</span>,<span class="string">'6'</span>,<span class="string">'7'</span>,<span class="string">'8'</span>]</span><br><span class="line">r = reduce(<span class="keyword">lambda</span> x, y: x + y,list_x,<span class="string">'aaa'</span>)</span><br><span class="line">print(r)<span class="comment">#aaa12345678</span></span><br><span class="line"><span class="comment"># 'aaa'将作为初始值参加运算</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="三元表达式"><a href="#三元表达式" class="headerlink" title="三元表达式"></a>三元表达式</h3><ul>
<li>其他语言中的三元表达式<br><code>x &gt; y ? x : y</code></li>
<li>python中的三元表达式<br><code>x if x &gt; y else y</code>  </li>
</ul>
<h3 id="filter（过滤）"><a href="#filter（过滤）" class="headerlink" title="filter（过滤）"></a>filter（过滤）</h3><ul>
<li>filter(function or None, iterable) –&gt; filter object<br>该函数接收两个参数，第一个为函数，第二个为序列，序列的每个元素作为参数传递给函数进行判断，然后返回 True 或 False，最后将返回 True 的元素放到新列表中。</li>
<li>基本用法</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_x = [<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>]</span><br><span class="line">r = filter(<span class="keyword">lambda</span> x: <span class="literal">True</span> <span class="keyword">if</span> x==<span class="number">1</span> <span class="keyword">else</span> <span class="literal">False</span>, list_x)</span><br><span class="line">print(list(r))<span class="comment">#[1, 1, 1, 1, 1]</span></span><br></pre></td></tr></table></figure>
<p>也可以酱紫</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_x = [<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>]</span><br><span class="line">r = filter(<span class="keyword">lambda</span> x: x, list_x)<span class="comment">#非0即True</span></span><br><span class="line">print(list(r))<span class="comment">#[1, 1, 1, 1, 1]</span></span><br></pre></td></tr></table></figure>
<p><em>注:lambda表达式（函数）必须返回的是True或False，它表示当前元素是否还应该包含在序列中</em>  </p>
<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><ul>
<li>函数式编程<br>包括如：<code>map、reduce、filter、lambda</code>  </li>
<li>命名式编程<br>包括如：<code>def 、if else、for</code></li>
</ul>
]]></content>
      <categories>
        <category>匿名函数</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>匿名函数</tag>
      </tags>
  </entry>
  <entry>
    <title>python装饰器与*args(**args)</title>
    <url>/2020/03/06/python%E8%A3%85%E9%A5%B0%E5%99%A8%E4%B8%8E-args-args/</url>
    <content><![CDATA[<h3 id="python中的装饰器"><a href="#python中的装饰器" class="headerlink" title="python中的装饰器"></a>python中的装饰器</h3><p><a href="https://www.runoob.com/w3cnote/python-func-decorators.html" target="_blank" rel="noopener">点我查看更详细讲解</a>  </p>
<p><strong>装饰器模式：允许向一个现有的对象添加新的功能，同时又不改变其结构。</strong><br>如下例，添加运行函数时打印运行时间的功能：</p>
<h4 id="普通思路"><a href="#普通思路" class="headerlink" title="普通思路"></a>普通思路</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'this is a function'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_time</span><span class="params">(func)</span>:</span></span><br><span class="line">    print(time.time())</span><br><span class="line">    func()</span><br><span class="line">print_time(f1)</span><br><span class="line"><span class="comment"># 1583410010.517994</span></span><br><span class="line"><span class="comment"># this is a function</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>

<p>然并卵的方法TAT</p>
<h4 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">        print(time.time())</span><br><span class="line">        func()</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'this is a function'</span>)</span><br><span class="line">f = decorator(f1)</span><br><span class="line">f()</span><br><span class="line"><span class="comment"># 1583410057.3736682</span></span><br><span class="line"><span class="comment"># this is a function</span></span><br></pre></td></tr></table></figure>
<h4 id="使用语法糖"><a href="#使用语法糖" class="headerlink" title="使用语法糖"></a>使用语法糖</h4><p>语法糖——使原本苦涩的代码结构变得甜蜜起来（嘤嘤嘤）但并不能提高性能</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">        print(time.time())</span><br><span class="line">        func()</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"><span class="meta">@decorator#语法糖</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'this is a function'</span>)</span><br><span class="line">f1()</span><br><span class="line"><span class="comment"># 1583410662.1807716</span></span><br><span class="line"><span class="comment"># this is a function</span></span><br></pre></td></tr></table></figure>
<h4 id="带参函数的装饰器"><a href="#带参函数的装饰器" class="headerlink" title="带参函数的装饰器"></a>带参函数的装饰器</h4><h5 id="带一个参数的函数"><a href="#带一个参数的函数" class="headerlink" title="带一个参数的函数"></a>带一个参数的函数</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(func_name)</span>:</span></span><br><span class="line">        print(time.time())</span><br><span class="line">        func(func_name)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(func_name)</span>:</span></span><br><span class="line">    print(<span class="string">'this is a function named '</span> + func_name)</span><br><span class="line">f1(<span class="string">'f1'</span>)</span><br><span class="line"><span class="comment"># 1583412433.7412617</span></span><br><span class="line"><span class="comment"># this is a function named f1</span></span><br></pre></td></tr></table></figure>
<h5 id="带未知个参数的函数"><a href="#带未知个参数的函数" class="headerlink" title="带未知个参数的函数"></a>带未知个参数的函数</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># *args 可变参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args)</span>:</span></span><br><span class="line">        print(time.time())</span><br><span class="line">        func(*args)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(func_name)</span>:</span></span><br><span class="line">    print(<span class="string">'this is a function named '</span> + func_name)</span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(func_name1, func_name2)</span>:</span></span><br><span class="line">    print(<span class="string">'this is a function named '</span> + func_name1)</span><br><span class="line">    print(<span class="string">'this is a function named '</span> + func_name2)</span><br><span class="line">f1(<span class="string">'test func'</span>)</span><br><span class="line">f2(<span class="string">'test func1'</span>,<span class="string">'test func2'</span>)</span><br><span class="line"><span class="comment"># 1583412906.5692015</span></span><br><span class="line"><span class="comment"># this is a function named test func</span></span><br><span class="line"><span class="comment"># 1583412906.5701988</span></span><br><span class="line"><span class="comment"># this is a function named test func1</span></span><br><span class="line"><span class="comment"># this is a function named test func2</span></span><br></pre></td></tr></table></figure>
<h5 id="带有未知个关键字参数的函数"><a href="#带有未知个关键字参数的函数" class="headerlink" title="带有未知个关键字参数的函数"></a>带有未知个关键字参数的函数</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># **kwargs 关键字参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        print(time.time())</span><br><span class="line">        func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(func_name)</span>:</span></span><br><span class="line">    print(<span class="string">'this is a function named '</span> + func_name)</span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(func_name1, func_name2)</span>:</span></span><br><span class="line">    print(<span class="string">'this is a function named '</span> + func_name1)</span><br><span class="line">    print(<span class="string">'this is a function named '</span> + func_name2)</span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f3</span><span class="params">(func_name1, func_name2, **kw)</span>:</span></span><br><span class="line">    print(<span class="string">'this is a function named '</span> + func_name1)</span><br><span class="line">    print(<span class="string">'this is a function named '</span> + func_name2)</span><br><span class="line">    print(kw)</span><br><span class="line">f1(<span class="string">'test func'</span>)</span><br><span class="line">f2(<span class="string">'test func1'</span>,<span class="string">'test func2'</span>)</span><br><span class="line">f3(<span class="string">'test func1'</span>,<span class="string">'test func2'</span>, a=<span class="number">1</span>, b=<span class="number">2</span>, c=<span class="string">'123'</span>)</span><br><span class="line"><span class="comment"># 1583413790.4759157</span></span><br><span class="line"><span class="comment"># this is a function named test func</span></span><br><span class="line"><span class="comment"># 1583413790.4759157</span></span><br><span class="line"><span class="comment"># this is a function named test func1</span></span><br><span class="line"><span class="comment"># this is a function named test func2</span></span><br><span class="line"><span class="comment"># 1583413790.4769275</span></span><br><span class="line"><span class="comment"># this is a function named test func1</span></span><br><span class="line"><span class="comment"># this is a function named test func2</span></span><br><span class="line"><span class="comment"># &#123;'a': 1, 'b': 2, 'c': '123'&#125;</span></span><br></pre></td></tr></table></figure>
<p><strong><em>注：关键字参数会以字典的形式打印出</em></strong></p>
<h3 id="扩展-args与-args"><a href="#扩展-args与-args" class="headerlink" title="扩展(args与*args)"></a>扩展(<em>args与*</em>args)</h3><h4 id="args（可变位置参数）的用法"><a href="#args（可变位置参数）的用法" class="headerlink" title="*args（可变位置参数）的用法"></a>*args（可变位置参数）的用法</h4><p>当传入的参数个数未知，且不需要知道参数名称时。  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func_arg</span><span class="params">(args1, *args)</span>:</span></span><br><span class="line">    print(<span class="string">"args1:"</span>, args1)</span><br><span class="line">    <span class="keyword">for</span> arg <span class="keyword">in</span> args:</span><br><span class="line">        print(<span class="string">"another arg:"</span>, arg)</span><br><span class="line">func_arg(<span class="string">'zhang'</span>,<span class="string">'666'</span>,<span class="string">"淦"</span>,<span class="string">'火之高兴'</span>,<span class="string">'霜之哀伤'</span>,<span class="number">666</span>)</span><br><span class="line"><span class="comment"># args1: zhang</span></span><br><span class="line"><span class="comment"># another arg: 666</span></span><br><span class="line"><span class="comment"># another arg: 淦</span></span><br><span class="line"><span class="comment"># another arg: 火之高兴</span></span><br><span class="line"><span class="comment"># another arg: 霜之哀伤</span></span><br><span class="line"><span class="comment"># another arg: 666</span></span><br></pre></td></tr></table></figure>

<h4 id="args（可变关键字参数）的用法"><a href="#args（可变关键字参数）的用法" class="headerlink" title="**args（可变关键字参数）的用法"></a>**args（可变关键字参数）的用法</h4><p>当传入的参数个数未知，但需要知道参数的名称时  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func_kwargs</span><span class="params">(args1, **kwargs)</span>:</span></span><br><span class="line">    print(<span class="string">"args1:"</span>, args1)</span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> kwargs:</span><br><span class="line">        print(<span class="string">"keyword arg: %s : %s"</span> % (key, kwargs[key]))</span><br><span class="line">func_kwargs(<span class="number">9527</span> ,birth=<span class="number">1997</span>, name=<span class="string">'zhang'</span>,请回答<span class="number">1988</span> = <span class="string">'闭嘴吧1997'</span>)</span><br><span class="line"><span class="comment"># args1: 9527</span></span><br><span class="line"><span class="comment"># keyword arg: birth : 1997</span></span><br><span class="line"><span class="comment"># keyword arg: name : zhang</span></span><br><span class="line"><span class="comment"># keyword arg: 请回答1988 : 闭嘴吧1997</span></span><br></pre></td></tr></table></figure>
<p>传入的参数以键值对的形式存放到字典里。</p>
<h4 id="扩展（利用-args将参数转换为字典）"><a href="#扩展（利用-args将参数转换为字典）" class="headerlink" title="扩展（利用**args将参数转换为字典）"></a>扩展（利用**args将参数转换为字典）</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">kw_dict</span><span class="params">(**kwargs)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> kwargs</span><br><span class="line">print(kw_dict(a=<span class="number">1</span>,b=<span class="number">2</span>,c=<span class="number">3</span>))</span><br><span class="line"><span class="comment"># &#123;'a': 1, 'b': 2, 'c': 3&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="OVER"><a href="#OVER" class="headerlink" title="OVER"></a>OVER</h3>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>装饰器</tag>
      </tags>
  </entry>
  <entry>
    <title>python中的枚举</title>
    <url>/2020/03/03/python%E4%B8%AD%E7%9A%84%E6%9E%9A%E4%B8%BE/</url>
    <content><![CDATA[<h2 id="python中的枚举"><a href="#python中的枚举" class="headerlink" title="python中的枚举"></a>python中的枚举</h2><ul>
<li>在pytho中使用枚举需要继承enum类(from enum import Enum)  </li>
</ul>
<h3 id="枚举相比普通类和字典的有点"><a href="#枚举相比普通类和字典的有点" class="headerlink" title="枚举相比普通类和字典的有点"></a>枚举相比普通类和字典的有点</h3><table>
<thead>
<tr>
<th align="left">枚举</th>
<th>字典</th>
<th>普通类</th>
</tr>
</thead>
<tbody><tr>
<td align="left">class VIP(Enum):<br>YELLOW = 1<br>GREEN = 1</td>
<td>a = {‘yellow’:1,’green’:2}</td>
<td>class test():<br>Yellow = 1<br>Green = 1</td>
</tr>
</tbody></table>
<a id="more"></a>
<ul>
<li>防止值可变的功能</li>
<li>防止相同标签的功能  </li>
</ul>
<h3 id="枚举的一般使用"><a href="#枚举的一般使用" class="headerlink" title="枚举的一般使用"></a>枚举的一般使用</h3><ul>
<li>获取枚举的类型</li>
<li>获取枚举的名称</li>
<li>获取枚举的值<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VIP</span><span class="params">(Enum)</span>:</span></span><br><span class="line">    YELLOW = <span class="number">1</span></span><br><span class="line">    GREEN = <span class="number">1</span></span><br><span class="line">print(VIP.YELLOW)<span class="comment">#VIP.YELLOW</span></span><br><span class="line">print(type(VIP.YELLOW))<span class="comment">#&lt;enum 'VIP'&gt;</span></span><br><span class="line"><span class="comment">#获取枚举的名称</span></span><br><span class="line">print(VIP.YELLOW.name)<span class="comment">#YELLOW</span></span><br><span class="line">print(type(VIP.YELLOW.name))<span class="comment">#&lt;class 'str'&gt;</span></span><br><span class="line"><span class="comment">#获取枚举的值</span></span><br><span class="line">print(VIP.YELLOW.value)<span class="comment">#1</span></span><br><span class="line">print(type(VIP.YELLOW.value))<span class="comment">#&lt;class 'int'&gt;</span></span><br><span class="line"><span class="comment"># 获取名称所对应的枚举类型</span></span><br><span class="line">print(VIP[<span class="string">'GREEN'</span>])<span class="comment">#VIP.YELLOW</span></span><br><span class="line">print(type(VIP[<span class="string">'GREEN'</span>]))<span class="comment">#&lt;enum 'VIP'&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="枚举的遍历"><a href="#枚举的遍历" class="headerlink" title="枚举的遍历"></a>枚举的遍历</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TEST</span><span class="params">(Enum)</span>:</span></span><br><span class="line">    YELLOW = <span class="number">1</span></span><br><span class="line">    GREEN = <span class="number">2</span></span><br><span class="line">    RED = <span class="number">4</span></span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> VIP:</span><br><span class="line">    print(v)</span><br><span class="line">print(len(TEST))<span class="comment">#3</span></span><br><span class="line"><span class="comment">#遍历结果如下：</span></span><br><span class="line"><span class="comment"># VIP.YELLOW</span></span><br><span class="line"><span class="comment"># VIP.GREEN</span></span><br><span class="line"><span class="comment"># VIP.RED</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>注意事项:当枚举中有值相同的两个(多个)名称时，其他的都将作为是第一个的别名</strong>  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TEST2</span><span class="params">(Enum)</span>:</span></span><br><span class="line">    YELLOW = <span class="number">1</span><span class="comment">#此处有两个1</span></span><br><span class="line">    GREEN = <span class="number">1</span></span><br><span class="line">    RED = <span class="number">4</span></span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> TEST2:</span><br><span class="line">    print(v)</span><br><span class="line">print(len(TEST2))<span class="comment">#2</span></span><br><span class="line"><span class="comment">#遍历结果如下：</span></span><br><span class="line"><span class="comment"># VIP2.YELLOW</span></span><br><span class="line"><span class="comment"># VIP2.RED</span></span><br></pre></td></tr></table></figure>
<ul>
<li>怎样将别名也打印出来  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TEST2</span><span class="params">(Enum)</span>:</span></span><br><span class="line">    YELLOW = <span class="number">1</span></span><br><span class="line">    GREEN = <span class="number">1</span></span><br><span class="line">    RED = <span class="number">4</span></span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> TEST2.__members__:</span><br><span class="line">    print(v)</span><br><span class="line"><span class="comment"># 输出结果为：</span></span><br><span class="line"><span class="comment"># YELLOW</span></span><br><span class="line"><span class="comment"># GREEN</span></span><br><span class="line"><span class="comment"># RED</span></span><br></pre></td></tr></table></figure>
<h3 id="枚举之间的比较（python中）"><a href="#枚举之间的比较（python中）" class="headerlink" title="枚举之间的比较（python中）"></a>枚举之间的比较（python中）</h3></li>
<li>枚举之间可以做等值比较</li>
<li>枚举之间不能做大小比较</li>
<li>可以做身份比较</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line"><span class="comment"># 枚举之间的比较</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VIP</span><span class="params">(Enum)</span>:</span></span><br><span class="line">    YELLOW = <span class="number">1</span></span><br><span class="line">    GREEN = <span class="number">2</span></span><br><span class="line">    RED = <span class="number">4</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VIP1</span><span class="params">(Enum)</span>:</span></span><br><span class="line">    YELLOW = <span class="number">1</span></span><br><span class="line">    GREEN = <span class="number">2</span></span><br><span class="line">    RED = <span class="number">4</span></span><br><span class="line"><span class="comment"># result = VIP.GREEN &gt; VIP.GREEN 会报错</span></span><br><span class="line">result = VIP.GREEN == VIP.GREEN</span><br><span class="line">print(result)<span class="comment">#True</span></span><br><span class="line">result = VIP.GREEN == VIP1.GREEN</span><br><span class="line">print(result)<span class="comment">#False</span></span><br><span class="line">result = VIP.GREEN <span class="keyword">is</span> VIP.GREEN</span><br><span class="line">print(result)<span class="comment">#True</span></span><br></pre></td></tr></table></figure>
<h3 id="枚举的转换"><a href="#枚举的转换" class="headerlink" title="枚举的转换"></a>枚举的转换</h3><ul>
<li>通过值获取枚举<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VIP</span><span class="params">(Enum)</span>:</span></span><br><span class="line">    YELLOW = <span class="number">1</span></span><br><span class="line">    GREEN = <span class="number">2</span></span><br><span class="line">    RED = <span class="number">4</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">print(VIP(a))<span class="comment"># VIP.YELLOW</span></span><br><span class="line">print(VIP(a).name)<span class="comment"># YELLOW</span></span><br></pre></td></tr></table></figure>
<h3 id="枚举拓展"><a href="#枚举拓展" class="headerlink" title="枚举拓展"></a>枚举拓展</h3><h4 id="IntEnum-取整"><a href="#IntEnum-取整" class="headerlink" title="IntEnum(取整)"></a>IntEnum(取整)</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> IntEnum</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VIP</span><span class="params">(IntEnum)</span>:</span></span><br><span class="line">    YELLOW = <span class="number">1</span></span><br><span class="line">    TEST = <span class="number">1.9</span><span class="comment">#取整为1，此时TEST为YELLOW的别名</span></span><br><span class="line">    GREEN = <span class="number">2</span></span><br><span class="line">    <span class="comment"># BLUE = 'str'#值中不能出现字符，会报错！！</span></span><br><span class="line">    GRAY = <span class="string">'3'</span><span class="comment">#数字字符将会自动转换为数字</span></span><br><span class="line">    <span class="comment"># TEST2 = '3.0'#引号中得是整数，会报错！！！</span></span><br><span class="line">    RED = <span class="number">4</span></span><br></pre></td></tr></table></figure>
<h4 id="unique-唯一"><a href="#unique-唯一" class="headerlink" title="unique(唯一)"></a>unique(唯一)</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum,unique</span><br><span class="line"><span class="meta">@unique</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VIP</span><span class="params">(Enum)</span>:</span></span><br><span class="line">    YELLOW = <span class="number">1</span></span><br><span class="line">    TEST = <span class="number">1</span><span class="comment">#引入@unique后，枚举类型不能取相同的value，也不能成为别名，会报错！！</span></span><br><span class="line">    <span class="comment"># TEST = 5#枚举类中的key也不能相同</span></span><br><span class="line">    GREEN = <span class="number">2</span></span><br><span class="line">    RED = <span class="number">4</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>枚举</category>
      </categories>
      <tags>
        <tag>枚举</tag>
        <tag>enum</tag>
      </tags>
  </entry>
  <entry>
    <title>python中json的基本用法</title>
    <url>/2020/03/03/python%E4%B8%ADjson%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><ul>
<li><p>JSON(JavaScript Object Notation，JavaScript对象标记)是一种轻量级数据<strong>交换格式</strong>  </p>
</li>
<li><p><em>字符串</em>是JSON的表现形式  </p>
</li>
<li><p>符合JSON格式的字符串叫做JSON字符串  </p>
</li>
</ul>
<a id="more"></a>

<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol>
<li>易于阅读</li>
<li>易于解析</li>
<li>网络传输效率高</li>
<li>跨语言交换数据  </li>
</ol>
<h3 id="JSON、JSON对象、JSON字符串"><a href="#JSON、JSON对象、JSON字符串" class="headerlink" title="JSON、JSON对象、JSON字符串"></a>JSON、JSON对象、JSON字符串</h3><h4 id="JSON-1"><a href="#JSON-1" class="headerlink" title="JSON"></a>JSON</h4><p>没错，它就是一种数据交换的格式</p>
<h4 id="JSON对象"><a href="#JSON对象" class="headerlink" title="JSON对象"></a>JSON对象</h4><ul>
<li>对象可以通过key访问value</li>
<li>例子如下：  <figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">json_object</span> = &#123;<span class="string">"name"</span>:<span class="string">"zhang"</span>, <span class="string">"age"</span>:<span class="number">22</span>&#125;<span class="comment">#在python中不存在json对象</span></span><br></pre></td></tr></table></figure>
<h4 id="JSON字符串"><a href="#JSON字符串" class="headerlink" title="JSON字符串"></a>JSON字符串</h4></li>
<li>所谓字符串：单引号’’或者双引号””引起来  </li>
<li>JSON字符串不能用key访问value</li>
<li>例子如下：<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">json_str = '&#123;<span class="string">"name"</span>:<span class="string">"zhang"</span>, <span class="string">"age"</span>:22&#125;'</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="JSON数据类型与python对象的转换"><a href="#JSON数据类型与python对象的转换" class="headerlink" title="JSON数据类型与python对象的转换"></a>JSON数据类型与python对象的转换</h3><h4 id="json库中的loads-方法-反序列化-JSON-gt-python"><a href="#json库中的loads-方法-反序列化-JSON-gt-python" class="headerlink" title="json库中的loads()方法(反序列化:JSON-&gt;python)"></a>json库中的loads()方法(反序列化:JSON-&gt;python)</h4><p><em>注：json对象中的字符串是用””</em></p>
<h5 id="一般JSON格式转换"><a href="#一般JSON格式转换" class="headerlink" title="一般JSON格式转换"></a>一般JSON格式转换</h5><p>转换为以字典的形式存储的数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">json_str = <span class="string">'&#123;"name":"zhang", "age":22&#125;'</span></span><br><span class="line">student = json.loads(json_str)</span><br><span class="line">print(type(student))<span class="comment">#&lt;class 'dict'&gt;</span></span><br><span class="line">print(student)<span class="comment">#&#123;'name': 'zhang', 'age': 22&#125;</span></span><br></pre></td></tr></table></figure>
<h5 id="JSON的数组形式转换"><a href="#JSON的数组形式转换" class="headerlink" title="JSON的数组形式转换"></a>JSON的数组形式转换</h5><p>JSON的数组形式,转换为以列表(List)的形式存储的数据(每个元素以字典的形式表现)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">json_str = <span class="string">'[&#123;"name":"zhang", "age":22,"flag":false&#125;,&#123;"money":null&#125;]'</span></span><br><span class="line">student = json.loads(json_str)</span><br><span class="line">print(type(student))<span class="comment">#&lt;class 'list'&gt;</span></span><br><span class="line">print(student)<span class="comment">#[&#123;'name': 'zhang', 'age': 22, 'flag': False&#125;, &#123;'money': None&#125;]</span></span><br></pre></td></tr></table></figure>
<h4 id="json库中的dumps-方法-序列化-python-gt-JSON"><a href="#json库中的dumps-方法-序列化-python-gt-JSON" class="headerlink" title="json库中的dumps()方法(序列化:python-&gt;JSON)"></a>json库中的dumps()方法(序列化:python-&gt;JSON)</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="comment">#序列化 ：字典转换为JSON字符串</span></span><br><span class="line">student = [</span><br><span class="line">        &#123;<span class="string">"name"</span>:<span class="string">"zhang"</span>, <span class="string">"age"</span>:<span class="number">22</span>,<span class="string">"flag"</span>:<span class="literal">False</span>&#125;,</span><br><span class="line">        &#123;<span class="string">"money"</span>:<span class="literal">None</span>,<span class="string">"time"</span>:<span class="string">"QAQ"</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">json_str = json.dumps(student)</span><br><span class="line">print(type(json_str))<span class="comment">#&lt;class 'str'&gt;</span></span><br><span class="line">print(json_str)<span class="comment">#[&#123;"name": "zhang", "age": 22, "flag": false&#125;, &#123;"money": null, "time": "QAQ"&#125;]</span></span><br></pre></td></tr></table></figure>
<h4 id="反-序列化转换总览"><a href="#反-序列化转换总览" class="headerlink" title="(反)序列化转换总览"></a>(反)序列化转换总览</h4><table>
<thead>
<tr>
<th>JSON</th>
<th>Python</th>
</tr>
</thead>
<tbody><tr>
<td>object</td>
<td>dict</td>
</tr>
<tr>
<td>array</td>
<td>list</td>
</tr>
<tr>
<td>string</td>
<td>str</td>
</tr>
<tr>
<td>number</td>
<td>int</td>
</tr>
<tr>
<td>number</td>
<td>float</td>
</tr>
<tr>
<td>true</td>
<td>True</td>
</tr>
<tr>
<td>false</td>
<td>False</td>
</tr>
<tr>
<td>null</td>
<td>None</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>json</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python中的正则表达式</title>
    <url>/2020/03/03/python%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="表达式简单介绍"><a href="#表达式简单介绍" class="headerlink" title="表达式简单介绍"></a>表达式简单介绍</h2><h3 id="字符集："><a href="#字符集：" class="headerlink" title="字符集："></a>字符集：</h3><ul>
<li><p><code>a[a-z]c  [A-Za-z0-9_]</code></p>
</li>
<li><p>[]表示：里面的字符为’或’关系</p>
</li>
<li><p>()组 表示：里面的字符为’且’关系</p>
</li>
<li><p>-表示：从左到右这一区间</p>
</li>
<li><p>^表示：非关系 如：<code>[^0-9]</code></p>
<a id="more"></a>

</li>
</ul>
<h3 id="概况字符集："><a href="#概况字符集：" class="headerlink" title="概况字符集："></a>概况字符集：</h3><ul>
<li>\d数字 \D非数字</li>
<li>\w匹配单词字符，等价于<code>[A-Za-z0-9_]</code>   \W(大写W)相反</li>
<li>\s空白字符 \n \t \r 空格     \S相反</li>
<li>. 匹配除换行符(\n)之外其他所有字符</li>
</ul>
<h3 id="数量词：-匹配的是字符或表达式"><a href="#数量词：-匹配的是字符或表达式" class="headerlink" title="数量词：(匹配的是字符或表达式)"></a>数量词：(匹配的是字符或表达式)</h3><ul>
<li>如：<code>[a-z]{3,6}</code></li>
<li>*表示：匹配0次或无限多次</li>
<li>+表示：匹配一次或无限多次</li>
<li>?表示 匹配0次或1次</li>
<li>{}表示：匹配的次数</li>
<li>{3,6}表示：匹配3到6次</li>
</ul>
<h3 id="贪婪与非贪婪-python默认为贪婪-："><a href="#贪婪与非贪婪-python默认为贪婪-：" class="headerlink" title="贪婪与非贪婪(python默认为贪婪)："></a>贪婪与非贪婪(python默认为贪婪)：</h3><ul>
<li>非贪婪的表示：[a-z]{3,6}? (注：当?前面的子表达式是一个范围时，则表示为非贪婪)</li>
</ul>
<h3 id="边界匹配："><a href="#边界匹配：" class="headerlink" title="边界匹配："></a>边界匹配：</h3><ul>
<li>^表示：从字符串的开始匹配</li>
<li>$表示：从字符串的末尾开始匹配</li>
</ul>
<h2 id="python中re模块中几个常用的方法"><a href="#python中re模块中几个常用的方法" class="headerlink" title="python中re模块中几个常用的方法"></a>python中re模块中几个常用的方法</h2><h3 id="sub-方法：-替换"><a href="#sub-方法：-替换" class="headerlink" title="sub()方法：(替换)"></a>sub()方法：(替换)</h3><p>sub(正则表达式,替换内容,原字符内容[,替换次数,匹配规则])</p>
<figure class="highlight plain"><figcaption><span>repl, string[, count</span></figcaption><table><tr><td class="code"><pre><span class="line">string也可以为一个函数</span><br><span class="line">count:默认为0，表示替换不限制次数；为1则替换1次</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;python</span><br><span class="line">import re</span><br><span class="line">s &#x3D; &#39;A8C3721D86&#39;</span><br><span class="line">def convert(value):</span><br><span class="line">    matched &#x3D; value.group()#得到具体的字符</span><br><span class="line">    if int(matched) &gt;&#x3D; 6:</span><br><span class="line">        return &#39;9&#39;</span><br><span class="line">    else:</span><br><span class="line">        return &#39;0&#39;</span><br><span class="line">r &#x3D; re.sub(&#39;\d&#39;,convert,s)</span><br><span class="line">print(r)</span><br></pre></td></tr></table></figure>
<h3 id="findall-方法：-查找"><a href="#findall-方法：-查找" class="headerlink" title="findall()方法：(查找)"></a>findall()方法：(查找)</h3><p><code>findall(pattern, string[, flags=0])</code><br>findall(正则表达式,字符内容[,匹配模式])<br>可选参数’匹配模式’的介绍：<br>re.I：让匹配不区分大小写<br>re.S：对.行为进行改变，使.匹配包括换行(\n)在内的所有字符。<br>多的模式用’|’间隔，如：findall(正则表达式,字符内容[re.I | re.S])  </p>
<h3 id="match-方法"><a href="#match-方法" class="headerlink" title="match()方法"></a>match()方法</h3><p><code>match(pattern, string, flags=0)</code><br>功能：从字符串的第一个字符开始匹配，若不成功则返回空(None)，匹配成功就返回(对，我溜了)。成功就返回一个包含匹配学习的对象，可以用group()方法获取值,span()方法获取匹配值在原字符串中的位置。  </p>
<h3 id="search-方法"><a href="#search-方法" class="headerlink" title="search()方法"></a>search()方法</h3><p><code>search(pattern, string, flags=0)</code><br>功能：搜索整个字符串，找到第一个匹配结果就返回(我也溜了)，不成功就返回None。返回一个包含匹配信息的对象，可以用group()方法获取值,span()方法获取匹配值在原字符串中的位置。  </p>
<h3 id="group-方法代码详解"><a href="#group-方法代码详解" class="headerlink" title="group()方法代码详解:"></a>group()方法代码详解:</h3><p>功能：用来提取分组截获的字符串，一个()代表一个分组<br>参数讲解：<br>group()与group(0)等价，都返回完整的内容<br>group(1)获取第1个分组的内容<br>group(2)获取第2个分组的内容<br>group(0,1,2)返回它们获取的内容，统一装入一个元组中<br>groups()返回所有分组匹配的字符，以元组的格式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">s = <span class="string">'life is short,i use python, i love python'</span></span><br><span class="line">r = re.search(<span class="string">'life(.*)python(.*)python'</span>,s)</span><br><span class="line">print(r.group())<span class="comment">#life is short,i use python, i love python</span></span><br><span class="line">print(r.group(<span class="number">0</span>))<span class="comment">#life is short,i use python, i love python</span></span><br><span class="line">print(r.group(<span class="number">1</span>))<span class="comment"># is short,i use</span></span><br><span class="line">print(r.group(<span class="number">2</span>))<span class="comment">#, i love</span></span><br><span class="line">print(r.groups())<span class="comment">#(' is short,i use ', ', i love ')</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>使用腾讯云图床</title>
    <url>/2020/01/17/%E4%BD%BF%E7%94%A8%E8%85%BE%E8%AE%AF%E4%BA%91%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>我的第一篇博客</title>
    <url>/2020/01/16/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p><a href="http://huihuiya.xyz" class="LinkCard">我的博客</a></p>
]]></content>
      <categories>
        <category>diary</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>diary</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/01/16/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<a id="more"></a>

<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
